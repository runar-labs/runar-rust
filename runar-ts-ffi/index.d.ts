/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** JavaScript service interface - completely dynamic */
export interface JsService {
  name: string
  servicePath: string
  version: string
  description: string
  networkId?: string
  actions: Array<string>
}
/** Register dispatcher from JS */
export declare function registerJsDispatch(cb: (...args: any[]) => any): void
/** JS calls into Rust with a message; returns a promise */
export declare function dispatchToRust(jsMsg: any): Promise<any>
/** Main Node interface for JavaScript */
export declare class JsNode {
  /** Synchronous constructor. Internally blocks on the async `Node::new`. */
  constructor()
  start(): Promise<void>
  stop(): Promise<void>
  request(path: string, payload?: JsonValue | undefined | null): Promise<JsonValue>
  publish(topic: string, data?: JsonValue | undefined | null): Promise<void>
  addService(jsService: JsService): Promise<void>
  /** Register a JS callback dispatcher */
  registerJsCallback(cb: (msg: any) => any | Promise<any>): void
}
