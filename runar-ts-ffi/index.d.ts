/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Context object passed to JavaScript action handlers */
export interface Context {
  networkId: string
  serviceName: string
  servicePath: string
}
/** JavaScript service definition with action handlers */
export interface JsService {
  name: string
  path: string
  version?: string
  description?: string
  actions?: JsActions
}
/** JavaScript action handlers */
export interface JsActions {
  echo?: boolean
  add?: boolean
}
/** Action call data passed to JavaScript - simplified for initial implementation */
export interface JsActionCall {
  payload?: JsonValue
  path: string
  networkId: string
}
/** Response from JavaScript action handler */
export interface JsActionResponse {
  success: boolean
  data?: JsonValue
  error?: string
}
/** Logger interface for JavaScript services */
export declare class JsLogger {
  debug(message: string): void
  info(message: string): void
  warn(message: string): void
  error(message: string): void
}
export declare class JsNode {
  /** Synchronous constructor. Internally blocks on the async `Node::new`. */
  constructor()
  /** Start the node. Resolves when networking and services are ready. */
  start(): Promise<void>
  /** Stop the node gracefully. */
  stop(): Promise<void>
  /** Make a service request and return the response as JSON. */
  request(path: string, payload?: JsonValue | undefined | null): Promise<JsonValue>
  /** Publish an event. Errors if topic invalid. */
  publish(topic: string, data?: JsonValue | undefined | null): Promise<void>
  /** Add a JavaScript service to the node. */
  addService(jsService: JsService): Promise<void>
}
