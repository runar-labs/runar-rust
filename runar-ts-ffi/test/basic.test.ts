import { describe, it, expect, beforeAll, afterAll } from 'vitest';

// Import the compiled native module - this will be generated by napi
// The exact import path depends on napi build output
let runarTs: any;

beforeAll(async () => {
  try {
    // Try to import the built native module
    runarTs = await import('../index.js');
  } catch (error) {
    console.warn('Native module not built yet. Run: npm run build:debug');
    throw error;
  }
});

describe('Runar TypeScript FFI', () => {
  let node: any;

  beforeAll(async () => {
    // Create a new node instance
    node = new runarTs.JsNode();
  });

  afterAll(async () => {
    if (node) {
      try {
        await node.stop();
      } catch (error) {
        // Ignore stop errors in tests
        console.warn('Error stopping node:', error);
      }
    }
  });

  it('should create a node instance', () => {
    expect(node).toBeDefined();
    expect(typeof node.start).toBe('function');
    expect(typeof node.stop).toBe('function');
    expect(typeof node.request).toBe('function');
    expect(typeof node.publish).toBe('function');
    expect(typeof node.addService).toBe('function');
  });

  it('should start and stop the node', async () => {
    await expect(node.start()).resolves.toBeUndefined();
    await expect(node.stop()).resolves.toBeUndefined();
  });

  it('should add a simple JavaScript service', async () => {
    await node.start();
    
    const jsService = {
      name: 'test-service',
      path: 'test',
      version: '1.0.0',
      description: 'Test service',
      actions: {
        echo: (payload: any) => Promise.resolve(payload)
      }
    };

    await expect(node.addService(jsService)).resolves.toBeUndefined();
    await node.stop();
  });

  it('should reject services without actions', async () => {
    await node.start();
    
    const invalidService = {
      name: 'invalid-service',
      path: 'invalid',
      version: '1.0.0',
      description: 'Service without actions'
      // No actions defined - should fail
    };

    // This should throw an error because no actions are defined
    await expect(node.addService(invalidService)).rejects.toThrow();
    
    await node.stop();
  });
}); 