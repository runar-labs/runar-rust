name: Rust CI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'rust-node/**'
      - 'rust-common/**'
      - 'rust-macros/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'rust-node/**'
      - 'rust-common/**'
      - 'rust-macros/**'
      - '.github/workflows/rust-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  # Configure git to use the token for all GitHub URLs
  GIT_CONFIG_COUNT: 1
  GIT_CONFIG_KEY_0: "url.https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/.insteadOf"
  GIT_CONFIG_VALUE_0: "git@github.com:"

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show .gitmodules and .git/config for debugging
        run: |
          echo "---- .gitmodules ----"
          cat .gitmodules || true
          echo "---- .git/config ----"
          cat .git/config || true
          echo "---- Submodule remotes ----"
          git submodule foreach 'echo $name: $(git remote -v)'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Check code format
        run: |
          cargo fmt --all -- --check

      - name: Check with clippy
        run: |
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: |
          cargo test --all-features

      - name: Build
        run: |
          cargo build --verbose
="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${repo_path}.git"
              echo "Using authenticated URL: https://github.com/${repo_path}.git"
              
              # Update the URL in .git/config
              git config --file=.git/modules/$submodule/config remote.origin.url "$url" || true
              # Update the URL in .gitmodules (for reference, though it shouldn't be used directly)
              git config -f .gitmodules "submodule.$submodule.url" "https://github.com/${repo_path}.git"
            fi
            
            # Initialize and update the submodule with the new URL
            echo "Initializing $submodule..."
            git submodule update --init --recursive --depth=1 "$submodule"
            
            # Verify the remote URL
            echo -n "Final remote URL: "
            git -C "$submodule" remote get-url origin
          }
          
          # Update and initialize required submodules
          update_submodule rust-common
          update_submodule rust-macros
          update_submodule rust-node
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check code format
        run: |
          echo "=== Formatting rust-common ==="
          cd rust-common
          cargo fmt --all -- --check
          
          echo "\n=== Formatting rust-macros ==="
          cd ../rust-macros
          cargo fmt --all -- --check
          
          echo "\n=== Formatting rust-node ==="
          cd ../rust-node
          cargo fmt --all -- --check
      
      - name: Check with clippy
        run: |
          echo "=== Checking rust-common with clippy ==="
          cd rust-common
          cargo clippy --all-targets --all-features -- -D warnings
          
          echo "\n=== Checking rust-macros with clippy ==="
          cd ../rust-macros
          cargo clippy --all-targets --all-features -- -D warnings
          
          echo "\n=== Checking rust-node with clippy ==="
          cd ../rust-node
          cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # Don't initialize submodules automatically
          submodules: false
          # Only fetch the current repository
          repository: runar-labs/rust-mono
          # Enable LFS
          lfs: true
          # This will make the checkout use the token for all submodules
          persist-credentials: true
          
      # Configure git to use HTTPS with token for authentication
      - name: Configure Git authentication
        run: |
          # Configure Git to use HTTPS with token for all GitHub URLs
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
          
          # Function to update and initialize a submodule with proper authentication
          update_submodule() {
            local submodule=$1
            echo "Updating $submodule..."
            
            # Get the current URL
            local url=$(git config -f .gitmodules --get "submodule.$submodule.url")
            echo "Original URL: $url"
            
            # Convert SSH to HTTPS with token
            if [[ $url == git@github.com:* ]]; then
              repo_path="${url#*:}"  # Remove 'git@github.com:'
              repo_path="${repo_path%.git}"  # Remove '.git' if present
              url="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${repo_path}.git"
              echo "Using authenticated URL: https://github.com/${repo_path}.git"
              
              # Update the URL in .git/config
              git config --file=.git/modules/$submodule/config remote.origin.url "$url" || true
              # Update the URL in .gitmodules (for reference, though it shouldn't be used directly)
              git config -f .gitmodules "submodule.$submodule.url" "https://github.com/${repo_path}.git"
            fi
            
            # Initialize and update the submodule with the new URL
            echo "Initializing $submodule..."
            git submodule update --init --recursive --depth=1 "$submodule"
            
            # Verify the remote URL
            echo -n "Final remote URL: "
            git -C "$submodule" remote get-url origin
          }
          
          # Update and initialize required submodules
          update_submodule rust-common
          update_submodule rust-macros
          update_submodule rust-node
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: |
          # Test rust-common first
          echo "=== Testing rust-common ==="
          cd rust-common
          cargo test --all-features
          
          # Then test rust-macros
          echo "\n=== Testing rust-macros ==="
          cd ../rust-macros
          cargo test --all-features
          
          # Finally test rust-node
          echo "\n=== Testing rust-node ==="
          cd ../rust-node
          cargo test --all-features

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # Don't initialize submodules automatically
          submodules: false
          # Only fetch the current repository
          repository: runar-labs/rust-mono
          # Enable LFS
          lfs: true
          # This will make the checkout use the token for all submodules
          persist-credentials: true
          
      # Configure git to use HTTPS with token for authentication
      - name: Configure Git authentication
        run: |
          # Configure Git to use HTTPS with token for all GitHub URLs
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
          
          # Function to update and initialize a submodule with proper authentication
          update_submodule() {
            local submodule=$1
            echo "Updating $submodule..."
            
            # Get the current URL
            local url=$(git config -f .gitmodules --get "submodule.$submodule.url")
            echo "Original URL: $url"
            
            # Convert SSH to HTTPS with token
            if [[ $url == git@github.com:* ]]; then
              repo_path="${url#*:}"  # Remove 'git@github.com:'
              repo_path="${repo_path%.git}"  # Remove '.git' if present
              url="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${repo_path}.git"
              echo "Using authenticated URL: https://github.com/${repo_path}.git"
              
              # Update the URL in .git/config
              git config --file=.git/modules/$submodule/config remote.origin.url "$url" || true
              # Update the URL in .gitmodules (for reference, though it shouldn't be used directly)
              git config -f .gitmodules "submodule.$submodule.url" "https://github.com/${repo_path}.git"
            fi
            
            # Initialize and update the submodule with the new URL
            echo "Initializing $submodule..."
            git submodule update --init --recursive --depth=1 "$submodule"
            
            # Verify the remote URL
            echo -n "Final remote URL: "
            git -C "$submodule" remote get-url origin
          }
          
          # Update and initialize required submodules
          update_submodule rust-common
          update_submodule rust-macros
          update_submodule rust-node
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build
        run: |
          # Build rust-common first
          echo "=== Building rust-common ==="
          cd rust-common
          cargo build --verbose
          
          # Then build rust-macros
          echo "\n=== Building rust-macros ==="
          cd ../rust-macros
          cargo build --verbose
          
          # Finally build rust-node
          echo "\n=== Building rust-node ==="
          cd ../rust-node
          cargo build --verbose
      
      - name: Build release
        run: |
          # Build rust-common in release mode
          echo "=== Building rust-common (release) ==="
          cd rust-common
          cargo build --release --verbose
          
          # Build rust-macros in release mode
          echo "\n=== Building rust-macros (release) ==="
          cd ../rust-macros
          cargo build --release --verbose
          
          # Build rust-node in release mode
          echo "\n=== Building rust-node (release) ==="
          cd ../rust-node
          cargo build --release --verbose

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # Don't initialize submodules automatically
          submodules: false
          # Only fetch the current repository
          repository: runar-labs/rust-mono
          # Enable LFS
          lfs: true
          # This will make the checkout use the token for all submodules
          persist-credentials: true
          
      # Configure git to use HTTPS with token for authentication
      - name: Configure Git authentication
        run: |
          # Configure Git to use HTTPS with token for all GitHub URLs
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
          
          # Function to update and initialize a submodule with proper authentication
          update_submodule() {
            local submodule=$1
            echo "Updating $submodule..."
            
            # Get the current URL
            local url=$(git config -f .gitmodules --get "submodule.$submodule.url")
            echo "Original URL: $url"
            
            # Convert SSH to HTTPS with token
            if [[ $url == git@github.com:* ]]; then
              repo_path="${url#*:}"  # Remove 'git@github.com:'
              repo_path="${repo_path%.git}"  # Remove '.git' if present
              url="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${repo_path}.git"
              echo "Using authenticated URL: https://github.com/${repo_path}.git"
              
              # Update the URL in .git/config
              git config --file=.git/modules/$submodule/config remote.origin.url "$url" || true
              # Update the URL in .gitmodules (for reference, though it shouldn't be used directly)
              git config -f .gitmodules "submodule.$submodule.url" "https://github.com/${repo_path}.git"
            fi
            
            # Initialize and update the submodule with the new URL
            echo "Initializing $submodule..."
            git submodule update --init --recursive --depth=1 "$submodule"
            
            # Verify the remote URL
            echo -n "Final remote URL: "
            git -C "$submodule" remote get-url origin
          }
          
          # Update and initialize required submodules
          update_submodule rust-common
          update_submodule rust-macros
          update_submodule rust-node
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      
      - name: Cache cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run benchmarks
        run: |
          cd rust-node
          pwd
          cargo bench --all-features --no-run
          cargo bench --all-features -- --list | tail -n +2 | head -n -1 | xargs -I{} bash -c "echo 'Running benchmark: {}' && cargo bench --all-features -- '{}'"
