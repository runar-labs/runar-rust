name: Rust CI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'rust-node/**'
      - 'rust-common/**'
      - 'rust-macros/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'rust-node/**'
      - 'rust-common/**'
      - 'rust-macros/**'
      - '.github/workflows/rust-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  # Configure git to use the token for all GitHub URLs
  GIT_CONFIG_COUNT: 1
  GIT_CONFIG_KEY_0: "url.https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/.insteadOf"
  GIT_CONFIG_VALUE_0: "git@github.com:"

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive
          fetch-depth: 1
          persist-credentials: true
          # Only fetch the required submodules
          repository: runar-labs/rust-mono
          path: .
          # This ensures the token is used for all submodule operations
          ssh-key: ${{ secrets.GH_PAT || '' }}
          # Explicitly list the submodules to initialize
          submodules: |
            rust-common
            rust-macros
            rust-node
          
      # Verify submodules were checked out
      - name: Verify submodules
        run: |
          echo "Verifying submodules..."
          for submodule in rust-common rust-macros rust-node; do
            echo "Checking $submodule..."
            if [ ! -d "$submodule" ]; then
              echo "Error: $submodule directory not found"
              exit 1
            fi
            echo "$submodule path: $(cd "$submodule" && pwd)"
            echo "$submodule remote: $(cd "$submodule" && git remote -v)"
          done
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check code format
        run: |
          echo "=== Formatting rust-common ==="
          cd rust-common
          cargo fmt --all -- --check
          
          echo "\n=== Formatting rust-macros ==="
          cd ../rust-macros
          cargo fmt --all -- --check
          
          echo "\n=== Formatting rust-node ==="
          cd ../rust-node
          cargo fmt --all -- --check
      
      - name: Check with clippy
        run: |
          echo "=== Checking rust-common with clippy ==="
          cd rust-common
          cargo clippy --all-targets --all-features -- -D warnings
          
          echo "\n=== Checking rust-macros with clippy ==="
          cd ../rust-macros
          cargo clippy --all-targets --all-features -- -D warnings
          
          echo "\n=== Checking rust-node with clippy ==="
          cd ../rust-node
          cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
          persist-credentials: true
          path: .
          # Don't initialize submodules yet
          submodules: false

      - name: Configure Git for HTTPS
        run: |
          # Configure Git to use HTTPS with token for all GitHub operations
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
          
          # Update submodule URLs to use HTTPS
          git submodule sync --recursive
          git submodule update --init --recursive --remote
          
          # Verify the remote URLs
          echo "Verifying submodule remote URLs..."
          for submodule in rust-common rust-macros rust-node; do
            if [ -d "$submodule" ]; then
              echo "$submodule remote: $(git -C "$submodule" remote -v)"
            else
              echo "Warning: $submodule directory not found"
            fi
          done
          
      # Verify submodules were checked out
      - name: Verify submodules
        run: |
          echo "Verifying submodules..."
          for submodule in rust-common rust-macros rust-node; do
            echo "Checking $submodule..."
            if [ ! -d "$submodule" ]; then
              echo "Error: $submodule directory not found"
              exit 1
            fi
            echo "$submodule path: $(cd "$submodule" && pwd)"
            echo "$submodule remote: $(cd "$submodule" && git remote -v)"
          done
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: |
          # Test rust-common first
          echo "=== Testing rust-common ==="
          cd rust-common
          cargo test --all-features
          
          # Then test rust-macros
          echo "\n=== Testing rust-macros ==="
          cd ../rust-macros
          cargo test --all-features
          
          # Finally test rust-node
          echo "\n=== Testing rust-node ==="
          cd ../rust-node
          cargo test --all-features

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
          persist-credentials: true
          path: .
          # Don't initialize submodules yet
          submodules: false

      - name: Configure Git for HTTPS
        run: |
          # Configure Git to use HTTPS with token for all GitHub operations
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
          
          # Update submodule URLs to use HTTPS
          git submodule sync --recursive
          git submodule update --init --recursive --remote
          
          # Verify the remote URLs
          echo "Verifying submodule remote URLs..."
          for submodule in rust-common rust-macros rust-node; do
            if [ -d "$submodule" ]; then
              echo "$submodule remote: $(git -C "$submodule" remote -v)"
            else
              echo "Warning: $submodule directory not found"
            fi
          done
          
      # Verify submodules were checked out
      - name: Verify submodules
        run: |
          echo "Verifying submodules..."
          for submodule in rust-common rust-macros rust-node; do
            echo "Checking $submodule..."
            if [ ! -d "$submodule" ]; then
              echo "Error: $submodule directory not found"
              exit 1
            fi
            echo "$submodule path: $(cd "$submodule" && pwd)"
            echo "$submodule remote: $(cd "$submodule" && git remote -v)"
          done
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build
        run: |
          # Build rust-common first
          echo "=== Building rust-common ==="
          cd rust-common
          cargo build --verbose
          
          # Then build rust-macros
          echo "\n=== Building rust-macros ==="
          cd ../rust-macros
          cargo build --verbose
          
          # Finally build rust-node
          echo "\n=== Building rust-node ==="
          cd ../rust-node
          cargo build --verbose
      
      - name: Build release
        run: |
          # Build rust-common in release mode
          echo "=== Building rust-common (release) ==="
          cd rust-common
          cargo build --release --verbose
          
          # Build rust-macros in release mode
          echo "\n=== Building rust-macros (release) ==="
          cd ../rust-macros
          cargo build --release --verbose
          
          # Build rust-node in release mode
          echo "\n=== Building rust-node (release) ==="
          cd ../rust-node
          cargo build --release --verbose

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1
          persist-credentials: true
          path: .
          # Don't initialize submodules yet
          submodules: false

      - name: Configure Git for HTTPS
        run: |
          # Configure Git to use HTTPS with token for all GitHub operations
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"
          git config --global url."https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "ssh://git@github.com/"
          
          # Update submodule URLs to use HTTPS
          git submodule sync --recursive
          git submodule update --init --recursive --remote
          
          # Verify the remote URLs
          echo "Verifying submodule remote URLs..."
          for submodule in rust-common rust-macros rust-node; do
            if [ -d "$submodule" ]; then
              echo "$submodule remote: $(git -C "$submodule" remote -v)"
            else
              echo "Warning: $submodule directory not found"
            fi
          done
          
      # Verify submodules were checked out
      - name: Verify submodules
        run: |
          echo "Verifying submodules..."
          for submodule in rust-common rust-macros rust-node; do
            echo "Checking $submodule..."
            if [ ! -d "$submodule" ]; then
              echo "Error: $submodule directory not found"
              exit 1
            fi
            echo "$submodule path: $(cd "$submodule" && pwd)"
            echo "$submodule remote: $(cd "$submodule" && git remote -v)"
          done
      
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      
      - name: Cache cargo registry and target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run benchmarks
        run: |
          cd rust-node
          pwd
          cargo bench --all-features --no-run
          cargo bench --all-features -- --list | tail -n +2 | head -n -1 | xargs -I{} bash -c "echo 'Running benchmark: {}' && cargo bench --all-features -- '{}'"
