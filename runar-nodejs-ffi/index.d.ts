/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** JavaScript service interface - completely dynamic */
export interface JsService {
  name: string
  servicePath: string
  version: string
  description: string
  networkId?: string
  actions: Array<string>
}
/**
 * JavaScript-safe node configuration interface
 * This exposes only the fields that are safe to expose to JS
 */
export interface JsNodeConfig {
  /** Correlation ID to link this config to the actual Rust config */
  correlationId: string
  /** Node ID (safe to expose) */
  nodeId: string
  /** Default network ID (safe to expose) */
  defaultNetworkId: string
  /** Additional network IDs (safe to expose) */
  networkIds: Array<string>
  /** Request timeout in milliseconds (safe to expose) */
  requestTimeoutMs: number
  /** Logging level (safe to expose) */
  logLevel?: string
}
/**
 * Create a test node configuration for JavaScript
 * This creates the full config in Rust and returns a JS-safe version
 */
export declare function createNodeTestConfig(): JsNodeConfig
/**
 * Create a production node configuration for JavaScript
 * This creates a basic config that can be customized
 */
export declare function createNodeConfig(nodeId: string, defaultNetworkId: string): JsNodeConfig
/** Register dispatcher from JS */
export declare function registerJsDispatch(cb: (...args: any[]) => any): void
/** JS calls into Rust with a message; returns a promise */
export declare function dispatchToRust(jsMsg: any): Promise<any>
/** Main Node interface for JavaScript */
export declare class JsNode {
  /** Synchronous constructor that accepts optional configuration */
  constructor(config?: JsNodeConfig | undefined | null)
  start(): Promise<void>
  stop(): Promise<void>
  request(path: string, payload?: JsonValue | undefined | null): Promise<JsonValue>
  publish(topic: string, data?: JsonValue | undefined | null): Promise<void>
  addService(jsService: JsService): Promise<void>
}
