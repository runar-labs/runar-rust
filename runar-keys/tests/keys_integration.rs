use runar_keys::*;

#[test]
fn test_key_generation_and_derivation() {

    // NOTE DO NOT CHANGE THE COMMENTS/INSTRUCTIONS HERE, UNLESS THERE IS AN ISSUE WITH IT AND IS CONFIRMED WITH THE USER
    // This goal of this test is to simulate the end to end flows.
    // in the real implemetnation the mobile process  and the node
    // process will be in different machines and talkig over the network,
    // but here we want to simulate the end to ened and  test the whole flow.
    // so  we willl bypass the network part and deal with the internal compionents
    // that will do the encryption part whic is what we need to develop and test here.
    // both mobile and node use the same codebase.  just doing acting in different roles.
    // make sure we keep instances od the same object separate in memory (one for mobiule and node)
    // to simulate the separation and avoid an implementation that tried to access data that it should not be able to.

    // DESIGN NOTES. we need to implement the primitives of encryptes.. the keyes, derivation,
    // shared secrets, envelop, sign, encryption/decrtption.. lets use crypto box for it https://github.com/RustCrypto/nacl-compat
    // We also need a higher level object (manager) that store the keys in mermory and prooviude the API for this dataflow.
    // keys wil be either generated by these objects (when in mobile or in node) or keys will be provided
    // (whe they arelady exists - will be lo9ade dfrom a secure storatge and loaded in this object (manager))
    // So for this test we dont need to worry about storage. this will be the next step.

    // 1 - (mobile side) - generate user master key
    // 2 - node side (setup mode) - generates its generate its own TLS and Storage keypairs
    //     and geneated a setup handshake token which contains the CSR request and the node public key
    //     which will be presented as QR code.. here in the test we use the token as a string dfirectly.
    // 3 - (mobile side) - received the token and sign the CSR
    // 4 - (node side) - received the signed CSR and generate the node membership certificate, stored encrypted and secure.
    // FROM THIS POINT THE NODE AND MOBILE WILL CONNECT USING THE NEW CERTIFICATES AND FURTHER COMMS ARE SECURED AND ECNRYPTED USING THESE NEW CREDENTIALS.
    // 5 - (mobile side) -  generate A NETWORK KEY AND SHARE IT WITH THE NODE
    // 6 - (node side) - received the network key and store it encrypted and secure.
    // 7 - (mobile side) - GENERATE A USER  profile key.
    // 8 - (mobile side) - Encrypts data using envelop whch is encrypted using the
    //     user profile key and network key.
    //     so only the user or apps running in the network can decrypt it.
    // 9 - (node side) - received the encrypted data and decrypts it using the
    //     network key. (the node does not have the user profile key - so it needs a shared secreted)
}
