[package]
name = "runar-keys"
version = "0.1.0"
edition = "2021"
description = "Standards-compliant X.509 certificates and ECDSA P-256 key management for Runar"
license = "MIT"
repository = "https://github.com/runar-labs/runar-rust"
homepage = "https://github.com/runar-labs/runar-rust"
documentation = "https://docs.rs/runar-keys"
readme = "README.md"
keywords = ["pki", "x509", "ecdsa", "p256", "tls"]
categories = ["cryptography", "authentication", "network-programming"]
rust-version = "1.70"

[dependencies]
# Core cryptographic libraries
p256 = { version = "0.13", features = ["ecdsa", "pkcs8", "serde", "ecdh"] }
ecdsa = "0.16"
pkcs8 = { version = "0.10", features = ["std"] }
rand = "0.8"

# Proper symmetric encryption (replaces XOR cipher)
aes-gcm = "0.10"
chacha20poly1305 = "0.10"

# Key derivation and hashing
hkdf = "0.12"
sha2 = "0.10"

# Certificate generation and parsing (pure Rust)
rcgen = "0.12"  # CSR generation
x509-parser = { version = "0.16", features = ["verify"] }
rustls-pki-types = "1.0"
x509-cert = { version = "0.2", features = ["builder"] }
spki = "0.7"
der = { version = "0.7", features = ["std"] }
const-oid = "0.9"
sha1 = "0.10"
time = { version = "0.3", features = ["formatting"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_cbor = "0.11"
hex = "0.4"
base64 = "0.21"  # For compact Base64 URL-safe encoding of public keys

# Logging framework
runar_common = { path = "../runar-common" }
log = "0.4"

# Error handling
thiserror = "1.0"
anyhow = "1.0"
bincode = "1.3"
prost = { version = "0.12", default-features = false, features = ["std", "derive"] }

# Apple Keychain/Secure Enclave (optional; used only with feature `apple-keystore` on macOS/iOS)
keychain-services = { version = "0.1.1", optional = true }
zeroize = { version = "1", optional = true }

# Async runtime for tests
tokio = { version = "1.0", features = ["full"] }

# Optional dependencies for testing
[dev-dependencies]
tempfile = "3.0"
rustls = "0.23"
rustls-pemfile = "2"

[features]
default = []
macros = []

# Enable native Apple device keystore backend (macOS/iOS) in `runar-keys`.
# This pulls in `keychain-services` and `zeroize` and compiles Apple-specific code behind cfg.
apple-keystore = ["dep:keychain-services", "dep:zeroize"]



[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
targets = [
    "x86_64-unknown-linux-gnu",
    "aarch64-unknown-linux-gnu",
    "x86_64-apple-darwin",
    "aarch64-apple-darwin",
    "x86_64-pc-windows-msvc",
    "aarch64-pc-windows-msvc",
]