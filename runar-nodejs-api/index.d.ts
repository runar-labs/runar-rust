/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Discovery {
  constructor(keys: Keys, optionsCbor: Buffer)
  init(optionsCbor: Buffer): Promise<void>
  bindEventsToTransport(transport: Transport): Promise<void>
  startAnnouncing(): Promise<void>
  stopAnnouncing(): Promise<void>
  shutdown(): Promise<void>
  updateLocalPeerInfo(peerInfoCbor: Buffer): Promise<void>
}

export declare class Keys {
  constructor()
  /**
   * Initialize this instance as a mobile manager
   * Returns error if already initialized with different type
   */
  initAsMobile(): void
  /**
   * Initialize this instance as a node manager
   * Returns error if already initialized with different type
   */
  initAsNode(): void
  setPersistenceDir(dir: string): void
  mobileInitializeUserRootKey(): Promise<void>
  mobileEncryptWithEnvelope(data: Buffer, networkId: string | undefined | null, profilePks: Array<Buffer>): Buffer
  nodeEncryptWithEnvelope(data: Buffer, networkId: string | undefined | null, profilePks: Array<Buffer>): Buffer
  /**
   * Backward compatibility function - use mobile_encrypt_with_envelope or node_encrypt_with_envelope instead
   * This function will be removed in a future version
   */
  encryptWithEnvelope(data: Buffer, networkId: string | undefined | null, profilePks: Array<Buffer>): Buffer
  nodeGetNodeId(): string
  nodeGetPublicKey(): Buffer
  enableAutoPersist(enabled: boolean): void
  wipePersistence(): Promise<void>
  flushState(): Promise<void>
  nodeGetKeystoreState(): number
  mobileGetKeystoreState(): number
  getKeystoreCaps(): DeviceKeystoreCaps
  encryptLocalData(data: Buffer): Buffer
  decryptLocalData(data: Buffer): Buffer
  mobileDecryptEnvelope(eedCbor: Buffer): Buffer
  nodeDecryptEnvelope(eedCbor: Buffer): Buffer
  /**
   * Backward compatibility function - use mobile_decrypt_envelope or node_decrypt_envelope instead
   * This function will be removed in a future version
   */
  decryptEnvelope(eedCbor: Buffer): Buffer
  nodeGenerateCsr(): Buffer
  mobileProcessSetupToken(stCbor: Buffer): Buffer
  nodeInstallCertificate(ncmCbor: Buffer): void
  mobileGenerateNetworkDataKey(): string
  mobileInstallNetworkPublicKey(networkPk: Buffer): void
  nodeInstallNetworkKey(nkmCbor: Buffer): void
  setLabelMapping(mappingCbor: Buffer): void
  setLocalNodeInfo(nodeInfoCbor: Buffer): void
  encryptForPublicKey(data: Buffer, recipientPk: Buffer): Buffer
  encryptForNetwork(data: Buffer, networkId: string): Buffer
  decryptNetworkData(eedCbor: Buffer): Buffer
  encryptMessageForMobile(message: Buffer, mobilePk: Buffer): Buffer
  decryptMessageFromMobile(encrypted: Buffer): Buffer
  mobileDeriveUserProfileKey(label: string): Buffer
  mobileGetNetworkPublicKey(networkId: string): Buffer
  mobileCreateNetworkKeyMessage(networkId: string, nodeAgreementPk: Buffer): Buffer
  ensureSymmetricKey(keyName: string): Buffer
  /**
   * Get the user public key after mobile initialization
   * This is essential for encrypting setup tokens to the mobile
   */
  mobileGetUserPublicKey(): Buffer
  /**
   * Get the node agreement public key
   * This is used for verifying agreement keys in CSR flow
   */
  nodeGetAgreementPublicKey(): Buffer
}

export declare class Transport {
  constructor(keys: Keys, optionsCbor: Buffer)
  completeRequest(requestId: string, responsePayload: Buffer, profilePk: Buffer): Promise<void>
  start(): Promise<void>
  stop(): Promise<void>
  connectPeer(peerInfoCbor: Buffer): Promise<void>
  isConnected(peerId: string): Promise<boolean>
  isConnectedToPublicKey(peerPublicKey: Buffer): Promise<boolean>
  request(path: string, correlationId: string, payload: Buffer, destPeerId: string, profilePk: Buffer): Promise<Buffer>
  requestToPublicKey(path: string, correlationId: string, payload: Buffer, destPublicKey: Buffer, profilePk: Buffer): Promise<Buffer>
  publish(path: string, correlationId: string, payload: Buffer, destPeerId: string): Promise<void>
  publishToPublicKey(path: string, correlationId: string, payload: Buffer, destPublicKey: Buffer): Promise<void>
  updatePeers(nodeInfoCbor: Buffer): Promise<void>
}

export interface DeviceKeystoreCaps {
  version: number
  flags: number
}
