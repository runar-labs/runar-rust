/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Discovery {
  constructor(keys: Keys, optionsCbor: Uint8Array)
  init(optionsCbor: Uint8Array): Promise<void>
  bindEventsToTransport(transport: Transport): Promise<void>
  startAnnouncing(): Promise<void>
  stopAnnouncing(): Promise<void>
  shutdown(): Promise<void>
  updateLocalPeerInfo(peerInfoCbor: Uint8Array): Promise<void>
}

export declare class Keys {
  constructor()
  /**
   * Initialize this instance as a mobile manager
   * Returns error if already initialized with different type
   */
  initAsMobile(): void
  /**
   * Initialize this instance as a node manager
   * Returns error if already initialized with different type
   */
  initAsNode(): void
  setPersistenceDir(dir: string): void
  mobileInitializeUserRootKey(): Promise<void>
  /**
   * Encrypt data using envelope encryption with mobile manager
   *
   * This function encrypts data for a specific network and profile public keys
   * using the mobile key manager's envelope encryption.
   */
  mobileEncryptWithEnvelope(data: Uint8Array, networkPublicKey: Uint8Array | undefined | null, profilePublicKeys: Array<Uint8Array>): Uint8Array
  /**
   * Encrypt data using envelope encryption with node manager
   *
   * This function encrypts data for a specific network and profile public keys
   * using the node key manager's envelope encryption.
   */
  nodeEncryptWithEnvelope(data: Uint8Array, networkPublicKey: Uint8Array | undefined | null, profilePublicKeys: Array<Uint8Array>): Uint8Array
  nodeGetNodeId(): string
  nodeGetPublicKey(): Uint8Array
  enableAutoPersist(enabled: boolean): void
  wipePersistence(): Promise<void>
  flushState(): Promise<void>
  nodeGetKeystoreState(): number
  mobileGetKeystoreState(): number
  getKeystoreCaps(): DeviceKeystoreCaps
  encryptLocalData(data: Uint8Array): Uint8Array
  decryptLocalData(data: Uint8Array): Uint8Array
  mobileDecryptEnvelope(eedCbor: Uint8Array): Uint8Array
  nodeDecryptEnvelope(eedCbor: Uint8Array): Uint8Array
  nodeGenerateCsr(): Uint8Array
  mobileProcessSetupToken(stCbor: Uint8Array): Uint8Array
  nodeInstallCertificate(ncmCbor: Uint8Array): void
  mobileGenerateNetworkDataKey(): string
  mobileInstallNetworkPublicKey(networkPk: Uint8Array): void
  nodeInstallNetworkKey(nkmCbor: Uint8Array): void
  setLocalNodeInfo(nodeInfoCbor: Uint8Array): void
  encryptForPublicKey(data: Uint8Array, recipientPk: Uint8Array): Uint8Array
  encryptForNetwork(data: Uint8Array, networkId: string): Uint8Array
  decryptNetworkData(eedCbor: Uint8Array): Uint8Array
  encryptMessageForMobile(message: Uint8Array, mobilePk: Uint8Array): Uint8Array
  decryptMessageFromMobile(encrypted: Uint8Array): Uint8Array
  mobileDeriveUserProfileKey(label: string): Uint8Array
  mobileGetNetworkPublicKey(networkId: string): Uint8Array
  mobileCreateNetworkKeyMessage(networkId: string, nodeAgreementPk: Uint8Array): Uint8Array
  ensureSymmetricKey(keyName: string): Uint8Array
  /**
   * Get the user public key after mobile initialization
   * This is essential for encrypting setup tokens to the mobile
   */
  mobileGetUserPublicKey(): Uint8Array
  /**
   * Get the node agreement public key
   * This is used for verifying agreement keys in CSR flow
   */
  nodeGetAgreementPublicKey(): Uint8Array
}

export declare class Transport {
  constructor(keys: Keys, optionsCbor: Uint8Array)
  completeRequest(requestId: string, responsePayload: Uint8Array, profilePublicKeys: Array<Uint8Array>): Promise<void>
  start(): Promise<void>
  stop(): Promise<void>
  connectPeer(peerInfoCbor: Uint8Array): Promise<void>
  isConnected(peerId: string): Promise<boolean>
  isConnectedToPublicKey(peerPublicKey: Uint8Array): Promise<boolean>
  request(path: string, correlationId: string, payload: Uint8Array, destPeerId: string, networkPublicKey?: Uint8Array | undefined | null, profilePublicKeys?: Array<Uint8Array> | undefined | null): Promise<Uint8Array>
  publish(path: string, correlationId: string, payload: Uint8Array, destPeerId: string, networkPublicKey?: Uint8Array | undefined | null): Promise<void>
  updatePeers(nodeInfoCbor: Uint8Array): Promise<void>
}

export interface DeviceKeystoreCaps {
  version: number
  flags: number
}
