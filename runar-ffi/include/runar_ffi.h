// Auto-generated by cbindgen for runar_ffi

#ifndef RUNAR_FFI_H
#define RUNAR_FFI_H

#pragma once

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct RNAPIKeysInner RNAPIKeysInner;

typedef struct RNAPITransportInner RNAPITransportInner;

typedef struct RNAPIRnError {
  int32_t code;
  const char *message;
} RNAPIRnError;

typedef struct RNAPIFfiKeysHandle {
  struct RNAPIKeysInner *inner;
} RNAPIFfiKeysHandle;

typedef struct RNAPIFfiTransportHandle {
  struct RNAPITransportInner *inner;
} RNAPIFfiTransportHandle;

void rn_free(uint8_t *_p, size_t _len);

void rn_string_free(const char *s);

/**
 * Set label mapping from a CBOR-encoded HashMap<String, LabelKeyInfo>.
 *
 * Returns 0 on success.
 * Returns 1 on null/invalid arguments.
 * Returns 2 on CBOR decode error; call `rn_last_error` to retrieve the error message.
 */
int32_t rn_keys_set_label_mapping(void *keys, const uint8_t *mapping_cbor, size_t len);

/**
 * Set local NodeInfo from a CBOR buffer.
 *
 * Returns 0 on success.
 * Returns 1 on null/invalid arguments.
 * Returns 2 on CBOR decode error; call `rn_last_error` to retrieve the error message.
 */
int32_t rn_keys_set_local_node_info(void *keys, const uint8_t *node_info_cbor, size_t len);

int32_t rn_last_error(char *out, size_t out_len);

void rn_set_log_level(int32_t level);

int32_t rn_keys_encrypt_with_envelope(void *keys,
                                      const uint8_t *data,
                                      size_t data_len,
                                      const char *network_id_or_null,
                                      const uint8_t *const *profile_pks,
                                      const size_t *profile_lens,
                                      size_t profiles_count,
                                      uint8_t **out_eed_cbor,
                                      size_t *out_len,
                                      struct RNAPIRnError *err);

int32_t rn_keys_decrypt_envelope(void *keys,
                                 const uint8_t *eed_cbor,
                                 size_t eed_len,
                                 uint8_t **out_plain,
                                 size_t *out_len,
                                 struct RNAPIRnError *err);

int32_t rn_keys_encrypt_local_data(void *keys,
                                   const uint8_t *data,
                                   size_t data_len,
                                   uint8_t **out_cipher,
                                   size_t *out_len,
                                   struct RNAPIRnError *err);

int32_t rn_keys_decrypt_local_data(void *keys,
                                   const uint8_t *encrypted,
                                   size_t enc_len,
                                   uint8_t **out_plain,
                                   size_t *out_len,
                                   struct RNAPIRnError *err);

int32_t rn_keys_encrypt_message_for_mobile(void *keys,
                                           const uint8_t *message,
                                           size_t message_len,
                                           const uint8_t *mobile_public_key,
                                           size_t pk_len,
                                           uint8_t **out_cipher,
                                           size_t *out_len,
                                           struct RNAPIRnError *err);

int32_t rn_keys_decrypt_message_from_mobile(void *keys,
                                            const uint8_t *encrypted_message,
                                            size_t enc_len,
                                            uint8_t **out_plain,
                                            size_t *out_len,
                                            struct RNAPIRnError *err);

int32_t rn_keys_encrypt_for_public_key(void *keys,
                                       const uint8_t *data,
                                       size_t data_len,
                                       const uint8_t *recipient_public_key,
                                       size_t pk_len,
                                       uint8_t **out_eed_cbor,
                                       size_t *out_len,
                                       struct RNAPIRnError *err);

int32_t rn_keys_encrypt_for_network(void *keys,
                                    const uint8_t *data,
                                    size_t data_len,
                                    const char *network_id,
                                    uint8_t **out_eed_cbor,
                                    size_t *out_len,
                                    struct RNAPIRnError *err);

int32_t rn_keys_decrypt_network_data(void *keys,
                                     const uint8_t *eed_cbor,
                                     size_t eed_len,
                                     uint8_t **out_plain,
                                     size_t *out_len,
                                     struct RNAPIRnError *err);

int32_t rn_discovery_new_with_multicast(void *keys,
                                        const uint8_t *options_cbor,
                                        size_t options_len,
                                        void **out_discovery,
                                        struct RNAPIRnError *err);

/**
 * Bun-friendly: returns discovery handle pointer; null on error. Delegates to the C-conventional API.
 */
void *rn_discovery_new_with_multicast_return(void *keys,
                                             const uint8_t *options_cbor,
                                             size_t options_len,
                                             struct RNAPIRnError *err);

void rn_discovery_free(void *discovery);

int32_t rn_discovery_init(void *discovery,
                          const uint8_t *options_cbor,
                          size_t options_len,
                          struct RNAPIRnError *err);

int32_t rn_discovery_bind_events_to_transport(void *discovery,
                                              void *transport,
                                              struct RNAPIRnError *err);

int32_t rn_discovery_start_announcing(void *discovery, struct RNAPIRnError *err);

int32_t rn_discovery_stop_announcing(void *discovery, struct RNAPIRnError *err);

int32_t rn_discovery_shutdown(void *discovery, struct RNAPIRnError *err);

int32_t rn_discovery_update_local_peer_info(void *discovery,
                                            const uint8_t *peer_info_cbor,
                                            size_t len,
                                            struct RNAPIRnError *err);

void rn_keys_free(void *keys);

/**
 * C-conventional: writes handle to out param; returns 0 on success, non-zero on error.
 */
int32_t rn_keys_new(void **out_keys, struct RNAPIRnError *err);

/**
 * Bun-friendly: returns the handle pointer directly; returns null on error; err is filled.
 */
void *rn_keys_new_return(struct RNAPIRnError *err);

int32_t rn_keys_node_get_public_key(void *keys,
                                    uint8_t **out,
                                    size_t *out_len,
                                    struct RNAPIRnError *err);

int32_t rn_keys_node_get_node_id(void *keys,
                                 char **out_str,
                                 size_t *out_len,
                                 struct RNAPIRnError *err);

int32_t rn_keys_node_generate_csr(void *keys,
                                  uint8_t **out_st_cbor,
                                  size_t *out_len,
                                  struct RNAPIRnError *err);

int32_t rn_keys_mobile_process_setup_token(void *keys,
                                           const uint8_t *st_cbor,
                                           size_t st_len,
                                           uint8_t **out_ncm_cbor,
                                           size_t *out_len,
                                           struct RNAPIRnError *err);

int32_t rn_keys_node_install_certificate(void *keys,
                                         const uint8_t *ncm_cbor,
                                         size_t ncm_len,
                                         struct RNAPIRnError *err);

// Persistence and native keystore management
typedef struct RNAPIRnDeviceKeystoreCaps {
  uint32_t version;
  uint32_t flags; // bitfield: 1=hardware_backed, 2=biometric_gate, 4=screenlock_required, 8=strongbox
} RNAPIRnDeviceKeystoreCaps;

int32_t rn_keys_set_persistence_dir(void *keys, const char *dir, struct RNAPIRnError *err);
int32_t rn_keys_enable_auto_persist(void *keys, bool enabled, struct RNAPIRnError *err);
int32_t rn_keys_wipe_persistence(void *keys, struct RNAPIRnError *err);
int32_t rn_keys_node_get_keystore_state(void *keys, int32_t *out_state, struct RNAPIRnError *err);
int32_t rn_keys_mobile_get_keystore_state(void *keys, int32_t *out_state, struct RNAPIRnError *err);
int32_t rn_keys_get_keystore_caps(void *keys, struct RNAPIRnDeviceKeystoreCaps *out_caps, struct RNAPIRnError *err);
int32_t rn_keys_register_apple_device_keystore(void *keys, const char *label, struct RNAPIRnError *err);

// Mobile (user) operations
int32_t rn_keys_mobile_initialize_user_root_key(void *keys, struct RNAPIRnError *err);
int32_t rn_keys_mobile_derive_user_profile_key(void *keys,
                                               const char *label,
                                               uint8_t **out_pk,
                                               size_t *out_len,
                                               struct RNAPIRnError *err);
int32_t rn_keys_mobile_install_network_public_key(void *keys,
                                                  const uint8_t *network_public_key,
                                                  size_t len,
                                                  struct RNAPIRnError *err);
int32_t rn_keys_mobile_generate_network_data_key(void *keys,
                                                 char **out_str,
                                                 size_t *out_len,
                                                 struct RNAPIRnError *err);
int32_t rn_keys_mobile_get_network_public_key(void *keys,
                                              const char *network_id,
                                              uint8_t **out_pk,
                                              size_t *out_len,
                                              struct RNAPIRnError *err);
int32_t rn_keys_mobile_create_network_key_message(void *keys,
                                                  const char *network_id,
                                                  const uint8_t *node_agreement_pk,
                                                  size_t node_agreement_pk_len,
                                                  uint8_t **out_msg_cbor,
                                                  size_t *out_len,
                                                  struct RNAPIRnError *err);

// Node operations
int32_t rn_keys_node_install_network_key(void *keys,
                                         const uint8_t *nkm_cbor,
                                         size_t nkm_len,
                                         struct RNAPIRnError *err);

// Legacy state import/export removed (no backwards compatibility)

int32_t rn_transport_new_with_keys(void *keys,
                                   const uint8_t *options_cbor,
                                   size_t options_len,
                                   void **out_transport,
                                   struct RNAPIRnError *err);

/**
 * Bun-friendly: returns transport handle pointer; null on error. Delegates to the C-conventional API.
 */
void *rn_transport_new_with_keys_return(void *keys,
                                        const uint8_t *options_cbor,
                                        size_t options_len,
                                        struct RNAPIRnError *err);

void rn_transport_free(void *transport);

int32_t rn_transport_start(void *transport, struct RNAPIRnError *err);

int32_t rn_transport_poll_event(void *transport,
                                uint8_t **out_event,
                                size_t *out_len,
                                struct RNAPIRnError *err);

int32_t rn_transport_connect_peer(void *transport,
                                  const uint8_t *peer_info_cbor,
                                  size_t len,
                                  struct RNAPIRnError *err);

int32_t rn_transport_disconnect_peer(void *transport,
                                     const char *peer_node_id,
                                     struct RNAPIRnError *err);

int32_t rn_transport_is_connected(void *transport,
                                  const char *peer_node_id,
                                  bool *out_connected,
                                  struct RNAPIRnError *err);

int32_t rn_transport_update_local_node_info(void *transport,
                                            const uint8_t *node_info_cbor,
                                            size_t len,
                                            struct RNAPIRnError *err);

int32_t rn_transport_request(void *transport,
                             const char *path,
                             const char *correlation_id,
                             const uint8_t *payload,
                             size_t payload_len,
                             const char *dest_peer_id,
                             const uint8_t *profile_pk,
                             size_t pk_len,
                             struct RNAPIRnError *err);

int32_t rn_transport_publish(void *transport,
                             const char *path,
                             const char *correlation_id,
                             const uint8_t *payload,
                             size_t payload_len,
                             const char *dest_peer_id,
                             struct RNAPIRnError *err);

int32_t rn_transport_complete_request(void *transport,
                                      const char *request_id,
                                      const uint8_t *response_payload,
                                      size_t len,
                                      const uint8_t *profile_pk,
                                      size_t pk_len,
                                      struct RNAPIRnError *err);

int32_t rn_transport_stop(void *transport, struct RNAPIRnError *err);

int32_t rn_transport_local_addr(void *transport,
                                char **out_str,
                                size_t *out_len,
                                struct RNAPIRnError *err);

#endif /* RUNAR_FFI_H */

// End of runar_ffi
